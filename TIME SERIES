#STATIONARY:

n <- 1e4
b <- 1
rho <- 0.2


x <- c(0,replicate(n,0))
for (i in 2:n){
  x[i] <- rho * x[i - 1] + b * rnorm(1)
}
plot(x, type = "l")

# or with higher rho:

n <- 1e4
b <- 1
rho <- 0.99


x <- c(0,replicate(n,0))
for (i in 2:n){
  x[i] <- rho * x[i - 1] + b * rnorm(1)
}
plot(x, type = "l")

# NON STATIONARY:

n <- 1e4
b <- 1
rho <- 1


x <- c(0,replicate(n,0))
for (i in 2:n){
  x[i] <- rho * x[i - 1] + b * rnorm(1)
}
plot(x, type = "l")

# ARMA:

ARMA = function(phi, theta, n=100, init=0, burn=0)
{
  m = n + burn # Optional burn-in
  z = rnorm(m) # White noise sample
  
  x = init
  for (i in 2:m) # Generate the time series
  {
    # Autoregression component
    
    p = min(length(x), length(phi)) # Prevent out-of-bounds
    AR = sum(phi[1:p] * x[1:p])
    
    # Moving-average component
    
    q = min(i-1, length(theta)) # Prevent out-of-bounds
    MA = sum(theta[1:q] * z[(i-1):(i-q)])
    
    # Combined AR+MA component
    
    new = AR + MA + z[i]
    x = c(new, x) # x is built in reverse
  }
  
  # Truncate the burn-in
  # Re-reverse x vector
  # Return time series
  
  ts(rev(x[1:n]))
}

plot(ARMA(0.3,0.2))
