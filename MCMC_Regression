# MCMC Monte Carlo Markov Chains from
# https://theoreticalecology.wordpress.com/2010/09/17/metropolis-hastings-mcmc-in-r/

set.seed(123)

## THE TRUE DATA:

slope <- 5          # This is the slope
intercept <- 0      # This is the intercept
noise<- 10          # This is the noise
sampleSize <- 31

# create independent x-values 

x <- (-(sampleSize-1)/2):((sampleSize-1)/2)

# As many (x,y) points as the sample.

# create dependent values according to ax + b + N(0,sd):

y <-  slope * x + intercept + rnorm(n=sampleSize, mean=0, sd = noise)

plot(x, y, main="Test Data")

## LIKELIHOOD FUNCTION:

likelihood <- function(param){
  
  a =  param[1] # First column for the specified row of "chain" (below), corresponding to the slope
  b =  param[2] # Second column ..., corresponding to intercept.
  sd = param[3] # Third column ..., corresponding to sd.
  
  pred = a * x + b # predicted
  
  # We use them to generate a predicted value with a line function.
  
  singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T)
  
  # And we see how "tall" the value corresponding to the defined (above) true (data) y's would be if the predicted
  # value was the mean - we are really measuring in a way the residual.
  # with homoskedesticity there is now a curve of errors distributed normally around 'pred'
  
  # This tells us how far the true proposed y is from the true y.
  
  sumll = sum(singlelikelihoods)
  return(sumll)   
}

# Example: plot the likelihood profile of the slope, leaving the 
# intercept and noise unchanged:

slopevalues <- function(x){return(likelihood(c(x, intercept, noise)))}

slopelikelihoods <- lapply(seq(3, 7, by=.05), slopevalues )
plot (seq(3, 7, by=.05), slopelikelihoods , type="l", 
      xlab = "values of slope parameter a",
      ylab = "Log likelihood")

# Prior distribution

prior <- function(param){
  a =  param[1]
  b =  param[2]
  sd = param[3]
  aprior =  dunif(a, min=0, max=10, log = T)
  bprior =  dnorm(b, sd = 5, log = T)
  sdprior = dunif(sd, min=0, max=30, log = T)
  return(aprior + bprior + bprior)
}

posterior <- function(param){
  return (likelihood(param) + prior(param))
}

# The param are going to be rows in the "chain" (see below), corresponding to slope / intercept / noise (sd).

######## Metropolis algorithm ################

proposalfunction <- function(param){
  return(rnorm(3, mean = param, sd= c(0.1,0.5,0.3)))
}

# Takes in three means (corresponding to a row of "chain" and generates three random numbers (a proposed new row for chain).

run_metropolis_MCMC <- function(startvalue, iterations){
  
  chain = array(dim = c(iterations + 1, 3))
 
  # array creates this:
  
  #         [,1] [,2] [,3]
  # [1,]     NA   NA   NA
  # [2,]     NA   NA   NA
  # ...
  # [10001]  NA   NA   NA
  
  chain[1,] = startvalue
  
  # startvalue fills in first row.
  
  for (i in 1:iterations){
  
    proposal = proposalfunction(chain[i,])
    
    # we run a function within run_metropolis_MCMC running on a loop through iterations. The proposalfunction
    # was already defined above.
    # it takes the three values of the row at time i and uses them as means in the proposal function,
    # which produces this for i = 1:
    
      # chain[1,]
      # [1]  4    0    10
      # proposalfunction <- function(param){ # Redefining the function to see what it does with rows of chain.
      # set.seed(0); return(rnorm(3, mean = param, sd= c(0.1, 0.5, 0.3)))
      # }
      # proposalfunction(chain[1,])
      # [1]  4.1262954 -0.1631167 10.3989398
      # proposalfunction(c(4, 0, 10)) # So it uses the three valuese of each column of chain as means to generate random
      # normals (3 of them) with different standard deviations - since in this case the mean of the columns of chain
      # go from ~ 5 for the slope to 0 for the intercept to 10 for the noise, using these values as means to generate
      # randoms will end up in similar rows:
      # [1]  4.1262954 -0.1631167 10.3989398
    
    probab = exp(posterior(proposal) - posterior(chain[i,]))
    
    
    if (runif(1) < probab){
      chain[i+1,] = proposal
    }else{
      chain[i+1,] = chain[i,]
    }
  }
  return(chain)
}

startvalue = c(4, 0, 10)
# The startvalue is the first row of the chain. 4 above goes to slope; 0 to intercept, and 10 to noise or sd.

chain = run_metropolis_MCMC(startvalue, 10000)

#chain
#                 [,1]                 [,2]                  [,3]
#[1,]          4.000000             0.00000000             10.00000
#[2,]          4.000000             0.00000000             10.00000
# ...
# ...
#[10000,]      4.980106             1.2658856              11.19833
#[10001,]      4.930751             1.3969398              11.24195
#              ~ 5 (slope)          ~ 0 (intercept)        ~ 10 for noise

burnIn = 5000
acceptance = 1 - mean(duplicated(chain[-(1:burnIn),]))

# chain[-(1:burnIn),] selects all the rows of "chain" excluding rows 1 through burnIn, which is 5000. So it results
# in 5001 rows with three columns.
# the function duplicated is boolean, and looks for duplicated values in the rows.
# mean(...) is the percentage of duplicated rows from 5001 to 10001.


### Summary: #######################

par(mfrow = c(2,3))
hist(chain[-(1:burnIn),1],nclass=30, , main="Posterior of slope", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = slope, col="red" )
hist(chain[-(1:burnIn),2],nclass=30, main="Posterior of intercept", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),2]))
abline(v = intercept, col="red" )
hist(chain[-(1:burnIn),3],nclass=30, main="Posterior of noise", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),3]) )
abline(v = noise, col="red" )
plot(chain[-(1:burnIn),1], type = "l", xlab="True value = red line" , main = "Chain values of slope", )
abline(h = slope, col="red" )
plot(chain[-(1:burnIn),2], type = "l", xlab="True value = red line" , main = "Chain values of intercept", )
abline(h = intercept, col="red" )
plot(chain[-(1:burnIn),3], type = "l", xlab="True value = red line" , main = "Chain values of noise", )
abline(h = noise, col="red" )

# for comparison:
summary(lm(y~x))
